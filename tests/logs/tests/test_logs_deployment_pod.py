#!/usr/bin/env python3
"""
Tests for the logs command with pod names in deployment directories
"""
import pytest

from command.logs import LogsCommand
from state.state import State
from utils.terminal import disable_colors, enable_colors


@pytest.fixture(autouse=True)
def no_color():
    """Disable colors for all tests"""
    disable_colors()
    yield
    enable_colors()


@pytest.fixture
def logs_command():
    """Create a logs command instance"""
    return LogsCommand()


@pytest.fixture
def state(monkeypatch):
    """Create a mocked state instance with a deployment path"""
    state = State()

    # Mock the get_current_path method to return our desired path
    # This avoids the need to actually set the path which might fail in tests
    monkeypatch.setattr(state, 'get_current_path', lambda: "default/deployments/example-deployment")

    return state


def test_logs_command_with_pod_name(logs_command, state, capsys, monkeypatch):
    """Test that the command correctly handles pod names in deployment directories"""
    # Set mock mode
    monkeypatch.setenv("K8SH_MOCK", "1")

    # Test with a pod name (generated by Kubernetes with hyphens and alphanumeric characters)
    logs_command.execute(state, ["example-deployment-7f5569bb7f-bcgjs"])
    captured = capsys.readouterr()

    # This should NOT have multiple slashes as 'deployment/example-deployment/example-deployment-7f5569bb7f-bcgjs'
    assert "Would run: kubectl logs  --tail 100 -n default example-deployment-7f5569bb7f-bcgjs" in captured.out


def test_logs_command_with_pod_name_and_flags(logs_command, state, capsys, monkeypatch):
    """Test that the command correctly handles pod names with flags"""
    # Set mock mode
    monkeypatch.setenv("K8SH_MOCK", "1")

    # Test with a pod name and -f flag
    logs_command.execute(state, ["-f", "example-deployment-7f5569bb7f-bcgjs"])
    captured = capsys.readouterr()
    assert "Would run: kubectl logs -f --tail 100 -n default example-deployment-7f5569bb7f-bcgjs" in captured.out

    # Test with a pod name and -n flag
    logs_command.execute(state, ["-n", "50", "example-deployment-7f5569bb7f-bcgjs"])
    captured = capsys.readouterr()
    assert "Would run: kubectl logs  --tail 50 -n default example-deployment-7f5569bb7f-bcgjs" in captured.out

    # Test with a pod name and both flags
    logs_command.execute(state, ["-f", "-n", "25", "example-deployment-7f5569bb7f-bcgjs"])
    captured = capsys.readouterr()
    assert "Would run: kubectl logs -f --tail 25 -n default example-deployment-7f5569bb7f-bcgjs" in captured.out


def test_logs_command_with_container_from_pods_directory(logs_command, capsys, monkeypatch):
    """Test that the command correctly handles containers from pods directory"""
    # Set mock mode
    monkeypatch.setenv("K8SH_MOCK", "1")

    # Create state with pods path and mock the path
    pod_state = State()
    monkeypatch.setattr(pod_state, 'get_current_path', lambda: "default/pods")

    # Test with a pod name and container
    logs_command.execute(pod_state, ["example-pod/app-container"])
    captured = capsys.readouterr()

    # Should work with pod/container format
    assert "Would run: kubectl logs --tail 100 -n default example-pod -c app-container" in captured.out


def test_logs_command_with_pod_and_container(logs_command, state, capsys, monkeypatch):
    """Test the specific case where a pod has a container specified"""
    # Set mock mode
    monkeypatch.setenv("K8SH_MOCK", "1")

    # When in a deployment directory, specifying pod-name/container should still work
    # but in practice it's handled differently from pods directory
    logs_command.execute(state, ["example-deployment-7f5569bb7f-bcgjs/app-container"])
    captured = capsys.readouterr()

    # The pod name should be detected correctly and the container should be passed with -c
    assert "Would run: kubectl logs  --tail 100 -n default example-deployment-7f5569bb7f-bcgjs -c app-container" in captured.out
